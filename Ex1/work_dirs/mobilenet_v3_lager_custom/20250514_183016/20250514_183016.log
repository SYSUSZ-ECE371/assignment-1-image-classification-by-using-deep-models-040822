2025/05/14 18:30:17 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1010251641
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.109
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 2.4.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.1+cu121
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1010251641
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/14 18:30:17 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
bgr_mean = [
    103.53,
    116.28,
    123.675,
]
bgr_std = [
    57.375,
    57.12,
    58.395,
]
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=1000,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
dataset_type = 'ImageNet'
default_hooks = dict(
    checkpoint=dict(interval=10, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
model = dict(
    backbone=dict(
        arch='large',
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth',
            prefix='backbone',
            type='Pretrained'),
        type='MobileNetV3'),
    head=dict(
        act_cfg=dict(type='HSwish'),
        dropout_rate=0.2,
        in_channels=960,
        init_cfg=dict(
            bias=0.0, layer='Linear', mean=0.0, std=0.01, type='Normal'),
        loss=dict(loss_weight=1.0, type='CrossEntropyLoss'),
        mid_channels=[
            1280,
        ],
        num_classes=5,
        topk=1,
        type='StackedLinearClsHead'),
    neck=dict(type='GlobalAveragePooling'),
    type='ImageClassifier')
optim_wrapper = dict(
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0001))
param_scheduler = dict(
    by_epoch=True, gamma=0.1, milestones=[
        15,
    ], type='MultiStepLR')
randomness = dict(deterministic=False, seed=None)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        data_prefix='val',
        data_root='data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        split='val',
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(topk=1, type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(edge='short', scale=256, type='ResizeEdge'),
    dict(crop_size=224, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=30, val_interval=1)
train_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='train.txt',
        data_prefix='train',
        data_root='data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(direction='horizontal', prob=0.5, type='RandomFlip'),
            dict(type='PackInputs'),
        ],
        split='train',
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        data_prefix='val',
        data_root='data/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        split='val',
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(topk=1, type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/mobilenet_v3_lager_custom'

2025/05/14 18:30:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/14 18:30:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/14 18:30:19 - mmengine - INFO - load backbone in model from: https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer0.bn.weight - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer0.bn.bias - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.expand_conv.conv.weight - torch.Size([64, 16, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.expand_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.expand_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.depthwise_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.depthwise_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 64, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.depthwise_conv.conv.weight - torch.Size([72, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.se.conv2.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.se.conv2.conv.bias - torch.Size([72]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 72, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.expand_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.expand_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.depthwise_conv.conv.weight - torch.Size([240, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.depthwise_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.depthwise_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.linear_conv.conv.weight - torch.Size([80, 240, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer7.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.expand_conv.conv.weight - torch.Size([200, 80, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.expand_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.expand_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.depthwise_conv.conv.weight - torch.Size([200, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.depthwise_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.depthwise_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.linear_conv.conv.weight - torch.Size([80, 200, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer8.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer9.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer10.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.expand_conv.conv.weight - torch.Size([480, 80, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.expand_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.expand_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.depthwise_conv.conv.weight - torch.Size([480, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.depthwise_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.depthwise_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.se.conv1.conv.weight - torch.Size([120, 480, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.se.conv1.conv.bias - torch.Size([120]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.se.conv2.conv.weight - torch.Size([480, 120, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.se.conv2.conv.bias - torch.Size([480]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.linear_conv.conv.weight - torch.Size([112, 480, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer11.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.depthwise_conv.conv.weight - torch.Size([672, 1, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.linear_conv.conv.weight - torch.Size([112, 672, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer12.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.depthwise_conv.conv.weight - torch.Size([672, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.linear_conv.conv.weight - torch.Size([160, 672, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer13.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer14.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer15.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer16.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer16.bn.weight - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

backbone.layer16.bn.bias - torch.Size([960]): 
PretrainedInit: load from https://download.openmmlab.com/mmclassification/v0/mobilenet_v3/convert/mobilenet_v3_large-3ea3c186.pth 

head.layers.0.fc.weight - torch.Size([1280, 960]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.0.fc.bias - torch.Size([1280]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.1.fc.weight - torch.Size([5, 1280]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.1.fc.bias - torch.Size([5]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 
2025/05/14 18:30:19 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/14 18:30:19 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/14 18:30:19 - mmengine - INFO - Checkpoints will be saved to /root/work_dirs/mobilenet_v3_lager_custom.
2025/05/14 18:30:22 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:22 - mmengine - INFO - Epoch(train)  [1][72/72]  lr: 1.0000e-03  eta: 0:01:17  time: 0.0312  data_time: 0.0005  memory: 1426  loss: 1.4626
2025/05/14 18:30:22 - mmengine - INFO - Epoch(val) [1][18/18]    accuracy/top1: 83.0986  data_time: 0.0157  time: 0.0281
2025/05/14 18:30:24 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:24 - mmengine - INFO - Epoch(train)  [2][72/72]  lr: 1.0000e-03  eta: 0:01:02  time: 0.0220  data_time: 0.0006  memory: 1426  loss: 1.2382
2025/05/14 18:30:24 - mmengine - INFO - Epoch(val) [2][18/18]    accuracy/top1: 89.6127  data_time: 0.0066  time: 0.0186
2025/05/14 18:30:26 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:26 - mmengine - INFO - Epoch(train)  [3][72/72]  lr: 1.0000e-03  eta: 0:00:55  time: 0.0218  data_time: 0.0006  memory: 1426  loss: 0.9064
2025/05/14 18:30:26 - mmengine - INFO - Epoch(val) [3][18/18]    accuracy/top1: 89.6127  data_time: 0.0082  time: 0.0169
2025/05/14 18:30:28 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:28 - mmengine - INFO - Epoch(train)  [4][72/72]  lr: 1.0000e-03  eta: 0:00:51  time: 0.0204  data_time: 0.0006  memory: 1426  loss: 0.6806
2025/05/14 18:30:28 - mmengine - INFO - Epoch(val) [4][18/18]    accuracy/top1: 90.4930  data_time: 0.0064  time: 0.0148
2025/05/14 18:30:30 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:30 - mmengine - INFO - Epoch(train)  [5][72/72]  lr: 1.0000e-03  eta: 0:00:48  time: 0.0214  data_time: 0.0005  memory: 1426  loss: 0.5201
2025/05/14 18:30:30 - mmengine - INFO - Epoch(val) [5][18/18]    accuracy/top1: 92.0775  data_time: 0.0052  time: 0.0153
2025/05/14 18:30:32 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:32 - mmengine - INFO - Epoch(train)  [6][72/72]  lr: 1.0000e-03  eta: 0:00:45  time: 0.0222  data_time: 0.0005  memory: 1426  loss: 0.4698
2025/05/14 18:30:32 - mmengine - INFO - Epoch(val) [6][18/18]    accuracy/top1: 91.9014  data_time: 0.0052  time: 0.0140
2025/05/14 18:30:34 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:34 - mmengine - INFO - Epoch(train)  [7][72/72]  lr: 1.0000e-03  eta: 0:00:42  time: 0.0201  data_time: 0.0005  memory: 1426  loss: 0.3170
2025/05/14 18:30:34 - mmengine - INFO - Epoch(val) [7][18/18]    accuracy/top1: 92.7817  data_time: 0.0045  time: 0.0131
2025/05/14 18:30:36 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:36 - mmengine - INFO - Epoch(train)  [8][72/72]  lr: 1.0000e-03  eta: 0:00:40  time: 0.0209  data_time: 0.0006  memory: 1426  loss: 0.2681
2025/05/14 18:30:36 - mmengine - INFO - Epoch(val) [8][18/18]    accuracy/top1: 93.1338  data_time: 0.0058  time: 0.0140
2025/05/14 18:30:38 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:38 - mmengine - INFO - Epoch(train)  [9][72/72]  lr: 1.0000e-03  eta: 0:00:38  time: 0.0202  data_time: 0.0005  memory: 1426  loss: 0.2915
2025/05/14 18:30:38 - mmengine - INFO - Epoch(val) [9][18/18]    accuracy/top1: 93.3099  data_time: 0.0074  time: 0.0152
2025/05/14 18:30:40 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:40 - mmengine - INFO - Epoch(train) [10][72/72]  lr: 1.0000e-03  eta: 0:00:36  time: 0.0203  data_time: 0.0005  memory: 1426  loss: 0.3349
2025/05/14 18:30:40 - mmengine - INFO - Saving checkpoint at 10 epochs
2025/05/14 18:30:40 - mmengine - INFO - Epoch(val) [10][18/18]    accuracy/top1: 93.3099  data_time: 0.0039  time: 0.0137
2025/05/14 18:30:42 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:42 - mmengine - INFO - Epoch(train) [11][72/72]  lr: 1.0000e-03  eta: 0:00:33  time: 0.0174  data_time: 0.0004  memory: 1426  loss: 0.3587
2025/05/14 18:30:42 - mmengine - INFO - Epoch(val) [11][18/18]    accuracy/top1: 94.1901  data_time: 0.0048  time: 0.0142
2025/05/14 18:30:44 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:44 - mmengine - INFO - Epoch(train) [12][72/72]  lr: 1.0000e-03  eta: 0:00:31  time: 0.0181  data_time: 0.0005  memory: 1426  loss: 0.2362
2025/05/14 18:30:44 - mmengine - INFO - Epoch(val) [12][18/18]    accuracy/top1: 94.5423  data_time: 0.0102  time: 0.0176
2025/05/14 18:30:46 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:46 - mmengine - INFO - Epoch(train) [13][72/72]  lr: 1.0000e-03  eta: 0:00:29  time: 0.0199  data_time: 0.0005  memory: 1426  loss: 0.2125
2025/05/14 18:30:46 - mmengine - INFO - Epoch(val) [13][18/18]    accuracy/top1: 94.5423  data_time: 0.0080  time: 0.0149
2025/05/14 18:30:48 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:48 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:48 - mmengine - INFO - Epoch(train) [14][72/72]  lr: 1.0000e-03  eta: 0:00:28  time: 0.0221  data_time: 0.0006  memory: 1426  loss: 0.2503
2025/05/14 18:30:48 - mmengine - INFO - Epoch(val) [14][18/18]    accuracy/top1: 95.4225  data_time: 0.0070  time: 0.0145
2025/05/14 18:30:50 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:50 - mmengine - INFO - Epoch(train) [15][72/72]  lr: 1.0000e-03  eta: 0:00:26  time: 0.0212  data_time: 0.0005  memory: 1426  loss: 0.2800
2025/05/14 18:30:50 - mmengine - INFO - Epoch(val) [15][18/18]    accuracy/top1: 94.5423  data_time: 0.0071  time: 0.0156
2025/05/14 18:30:52 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:52 - mmengine - INFO - Epoch(train) [16][72/72]  lr: 1.0000e-04  eta: 0:00:24  time: 0.0213  data_time: 0.0007  memory: 1426  loss: 0.2105
2025/05/14 18:30:52 - mmengine - INFO - Epoch(val) [16][18/18]    accuracy/top1: 94.7183  data_time: 0.0066  time: 0.0149
2025/05/14 18:30:54 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:54 - mmengine - INFO - Epoch(train) [17][72/72]  lr: 1.0000e-04  eta: 0:00:22  time: 0.0196  data_time: 0.0005  memory: 1426  loss: 0.1930
2025/05/14 18:30:54 - mmengine - INFO - Epoch(val) [17][18/18]    accuracy/top1: 95.0704  data_time: 0.0055  time: 0.0152
2025/05/14 18:30:56 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:56 - mmengine - INFO - Epoch(train) [18][72/72]  lr: 1.0000e-04  eta: 0:00:20  time: 0.0197  data_time: 0.0005  memory: 1426  loss: 0.1804
2025/05/14 18:30:56 - mmengine - INFO - Epoch(val) [18][18/18]    accuracy/top1: 95.4225  data_time: 0.0070  time: 0.0155
2025/05/14 18:30:57 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:57 - mmengine - INFO - Epoch(train) [19][72/72]  lr: 1.0000e-04  eta: 0:00:18  time: 0.0196  data_time: 0.0005  memory: 1426  loss: 0.1776
2025/05/14 18:30:58 - mmengine - INFO - Epoch(val) [19][18/18]    accuracy/top1: 95.4225  data_time: 0.0079  time: 0.0148
2025/05/14 18:30:59 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:30:59 - mmengine - INFO - Epoch(train) [20][72/72]  lr: 1.0000e-04  eta: 0:00:17  time: 0.0199  data_time: 0.0006  memory: 1426  loss: 0.2037
2025/05/14 18:30:59 - mmengine - INFO - Saving checkpoint at 20 epochs
2025/05/14 18:31:00 - mmengine - INFO - Epoch(val) [20][18/18]    accuracy/top1: 95.4225  data_time: 0.0067  time: 0.0150
2025/05/14 18:31:01 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:01 - mmengine - INFO - Epoch(train) [21][72/72]  lr: 1.0000e-04  eta: 0:00:15  time: 0.0198  data_time: 0.0005  memory: 1426  loss: 0.2458
2025/05/14 18:31:02 - mmengine - INFO - Epoch(val) [21][18/18]    accuracy/top1: 95.4225  data_time: 0.0063  time: 0.0145
2025/05/14 18:31:03 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:03 - mmengine - INFO - Epoch(train) [22][72/72]  lr: 1.0000e-04  eta: 0:00:13  time: 0.0174  data_time: 0.0005  memory: 1426  loss: 0.1563
2025/05/14 18:31:03 - mmengine - INFO - Epoch(val) [22][18/18]    accuracy/top1: 95.4225  data_time: 0.0044  time: 0.0125
2025/05/14 18:31:05 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:05 - mmengine - INFO - Epoch(train) [23][72/72]  lr: 1.0000e-04  eta: 0:00:11  time: 0.0181  data_time: 0.0005  memory: 1426  loss: 0.2000
2025/05/14 18:31:05 - mmengine - INFO - Epoch(val) [23][18/18]    accuracy/top1: 95.4225  data_time: 0.0061  time: 0.0128
2025/05/14 18:31:07 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:07 - mmengine - INFO - Epoch(train) [24][72/72]  lr: 1.0000e-04  eta: 0:00:10  time: 0.0183  data_time: 0.0005  memory: 1426  loss: 0.1680
2025/05/14 18:31:07 - mmengine - INFO - Epoch(val) [24][18/18]    accuracy/top1: 95.0704  data_time: 0.0057  time: 0.0127
2025/05/14 18:31:09 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:09 - mmengine - INFO - Epoch(train) [25][72/72]  lr: 1.0000e-04  eta: 0:00:08  time: 0.0218  data_time: 0.0007  memory: 1426  loss: 0.1784
2025/05/14 18:31:09 - mmengine - INFO - Epoch(val) [25][18/18]    accuracy/top1: 95.2465  data_time: 0.0065  time: 0.0146
2025/05/14 18:31:10 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:10 - mmengine - INFO - Epoch(train) [26][72/72]  lr: 1.0000e-04  eta: 0:00:06  time: 0.0179  data_time: 0.0005  memory: 1426  loss: 0.2191
2025/05/14 18:31:11 - mmengine - INFO - Epoch(val) [26][18/18]    accuracy/top1: 95.2465  data_time: 0.0061  time: 0.0147
2025/05/14 18:31:12 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:12 - mmengine - INFO - Epoch(train) [27][72/72]  lr: 1.0000e-04  eta: 0:00:05  time: 0.0209  data_time: 0.0006  memory: 1426  loss: 0.2483
2025/05/14 18:31:13 - mmengine - INFO - Epoch(val) [27][18/18]    accuracy/top1: 95.2465  data_time: 0.0048  time: 0.0132
2025/05/14 18:31:14 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:14 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:14 - mmengine - INFO - Epoch(train) [28][72/72]  lr: 1.0000e-04  eta: 0:00:03  time: 0.0192  data_time: 0.0005  memory: 1426  loss: 0.2452
2025/05/14 18:31:15 - mmengine - INFO - Epoch(val) [28][18/18]    accuracy/top1: 95.2465  data_time: 0.0071  time: 0.0155
2025/05/14 18:31:16 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:16 - mmengine - INFO - Epoch(train) [29][72/72]  lr: 1.0000e-04  eta: 0:00:01  time: 0.0209  data_time: 0.0005  memory: 1426  loss: 0.1739
2025/05/14 18:31:17 - mmengine - INFO - Epoch(val) [29][18/18]    accuracy/top1: 95.2465  data_time: 0.0063  time: 0.0150
2025/05/14 18:31:18 - mmengine - INFO - Exp name: mobilenet_v3_lager_custom_20250514_183016
2025/05/14 18:31:18 - mmengine - INFO - Epoch(train) [30][72/72]  lr: 1.0000e-04  eta: 0:00:00  time: 0.0214  data_time: 0.0005  memory: 1426  loss: 0.1558
2025/05/14 18:31:18 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/14 18:31:19 - mmengine - INFO - Epoch(val) [30][18/18]    accuracy/top1: 95.0704  data_time: 0.0080  time: 0.0150
